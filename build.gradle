buildscript {
  ext {
    spockVersion = '1.1-groovy-2.4'
    schemasVersion = '0.4.0'
    confluentVersion = '5.3.1'
    kafkaVersion = '2.3.0'
  }
  dependencies {
    classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
  }
  // jib uses its own version of guava, so we remove it from our
  // build configuration to prevent using our project-specified version of guava
  // refer to this issue: https://github.com/spotbugs/spotbugs-gradle-plugin/issues/120
  configurations.classpath {
    exclude group: 'com.google.guava', module: 'guava'
  }
}

plugins {
  id "org.owasp.dependencycheck" version "4.0.0.1"
}

dependencyCheck {
  skipConfigurations = ["providedRuntime"]
  suppressionFile = "${rootDir}/owasp-suppressions.xml"
  failBuildOnCVSS = 4

  // One of our dependencies has an un-parsable pom which causes dependency-checker
  // to throw an exception. However, the checks still run and it still generates a
  // report, so I think it's safe(ish) to ignore the error.
  failOnError = false
}
task('check').dependsOn('dependencyCheckAggregate')
task('build').dependsOn('check')

group = 'org.cedar.psi'

subprojects {
  group = rootProject.group
  version = rootProject.version

  // URL for the source code under version control from which this container image was built.
  project.ext.getVcsUrl = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
      ignoreExitValue = true
      workingDir '.'
      executable = 'git'
      args = ['config', '--get', 'remote.origin.url']
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }

  // Identifier for the version of the source code from which this image was built.
  // For example if the version control system is git this is the SHA.
  project.ext.getVcsRef = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
      ignoreExitValue = true
      workingDir '.'
      executable = 'git'
      args = ['rev-parse', '--short', 'HEAD']
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }
  
  it.ext.buildDate = "${new Date().format("YYYY-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))}"

  afterEvaluate {
    repositories {
      mavenCentral()
      maven { url "https://repo.spring.io/milestone" }
      maven { url 'https://packages.confluent.io/maven/' }
      maven { url "https://www.jitpack.io" }
    }

    if (project.plugins.hasPlugin('jacoco')) {
      jacocoTestReport {
        executionData fileTree(projectDir).include("build/jacoco/*.exec")

        reports {
          xml.enabled true
          xml.destination = file("${buildDir}/reports/jacoco/report.xml")
          html.enabled true
          html.destination = file("${buildDir}/reports/jacoco/html")
        }
      }
      check.dependsOn jacocoTestReport
    }
    
    // override dependency versions
    configurations.all {
      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'com.fasterxml.jackson.core' &&
            details.requested.name == 'jackson-databind' &&
            details.requested.version <= '2.9.9') {
          details.useVersion '2.9.10'
          details.because 'Avoid vulnerabilities in jackson-databind 2.9.9 and below'
        }
      }

      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group.startsWith('org.apache.tomcat') &&
            details.requested.name.contains('tomcat') &&
            details.requested.version <= '9.0.19') {
          details.useVersion '9.0.20'
          details.because 'Enforce tomcat 9.0.20+ to avoid vulnerabilities CVE-2019-0199, CVE-2019-0232, and CVE-2019-10072'
        }
      }
    }
    
  }

}
