buildscript {
  ext {
    spockVersion = '1.1-groovy-2.4'
  }
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'com.gradle:build-scan-plugin:1.11'
    classpath "gradle.plugin.org.cedar:dockerplugin:1.0.2"
    classpath 'org.owasp:dependency-check-gradle:3.1.1'
  }
}

apply plugin: 'org.owasp.dependencycheck'
dependencyCheck {
  skipConfigurations = ["providedRuntime"]
  suppressionFile = "${rootDir}/owasp-suppressions.xml"
  failBuildOnCVSS = 4

  // One of our dependencies has an un-parsable pom which causes dependency-checker
  // to throw an exception. However, the checks still run and it still generates a
  // report, so I think it's safe(ish) to ignore the error.
  failOnError = false
}
task('check').dependsOn('dependencyCheckAggregate')
task('build').dependsOn('check')

group = 'org.cedar.psi'

subprojects {
  group = rootProject.group
  version = rootProject.version

  afterEvaluate {
    repositories {
      mavenCentral()
      maven { url "https://repo.spring.io/milestone" }
    }

    if (project.plugins.hasPlugin('org.cedar.dockerplugin')) {
      docker {
        username = System.getenv('DOCKER_USER')
        password = System.getenv('DOCKER_PASSWORD')
      }
    }
  }
}

task composeStart(type: Exec, description: 'Runs the entire system in docker containers', group: 'docker') {
  dependsOn ":registry:build", ":script-wrapper:build"
  executable = "bash"
  args = ["-c", "docker-compose up -d"]
}

task composeStop(type: Exec, description: 'Stops the entire system in docker containers', group: 'docker') {
  executable = "bash"
  args = ["-c", "docker-compose stop"]
}

task composeInfraStart(type: Exec, description: 'Runs infrastructure needed under our apps, e.g. elasticsearch', group: 'docker') {
  executable = "bash"
  args = ["-c", "docker-compose up -d elasticsearch kafka kafka-connect kafka-rest kafka-manager kafka-ui schema-registry zookeeper"]
}

task composeInfraStop(type: Exec, description: 'Stops the infrastructure needed under our apps, e.g. elasticsearch', group: 'docker') {
  executable = "bash"
  args = ["-c", "docker-compose stop elasticsearch kafka kafka-connect kafka-rest kafka-manager kafka-ui schema-registry zookeeper"]
}

task composeClean(type: Exec, description: 'Stops and removes the entire system of docker containers', group: 'docker') {
  executable = "bash"
  args = ["-c", "docker-compose down && docker-compose rm"]
}

task clean {
  dependsOn composeClean
}
