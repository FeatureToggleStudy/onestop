plugins {
  id 'war'
  id 'groovy'
  id 'jacoco'
  id "org.springframework.boot" version "2.1.6.RELEASE"
  id "io.spring.dependency-management" version "1.0.8.RELEASE"
  id 'org.cedar.dockerplugin' version '1.0.3'
  id "com.moowork.node"
}

configurations {
  implementation.exclude module: 'tomcat-annotations-api', group: 'org.apache.tomcat'
  testImplementation.exclude(group: 'ch.qos.logback')
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
  
  schemaDefinitions
}

dependencies {
  implementation('org.codehaus.groovy:groovy')
  implementation('org.codehaus.groovy:groovy-json')
  implementation('org.springframework.boot:spring-boot-starter-web')
  implementation('org.apache.kafka:kafka-streams:2.1.0')
  implementation('org.apache.kafka:kafka-clients:2.1.0')
  implementation('io.confluent:kafka-streams-avro-serde:5.1.0')
  implementation(project(':common'))
  implementation("org.json:json:20190722")
  
  // -- CAS Authentication --
  implementation('org.springframework.boot:spring-boot-starter-security')
  implementation('org.springframework.security:spring-security-cas')
  testImplementation('org.springframework.security:spring-security-test')
  
  //used to copy schema definitions to generate openAPI 
  schemaDefinitions ("com.github.cedardevs.schemas:schemas-core:${project.schemasVersion}")

  compileOnly('org.springframework.boot:spring-boot-starter-tomcat')

  runtime('org.springframework.boot:spring-boot-devtools')

  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation("org.spockframework:spock-spring:${project.spockVersion}")
  testImplementation("org.spockframework:spock-core:${project.spockVersion}")
  testImplementation('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1')
  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation('org.springframework.kafka:spring-kafka-test:2.2.3.RELEASE')
  testImplementation('org.apache.kafka:kafka-streams-test-utils:2.1.0')
  testImplementation('org.apache.kafka:kafka-clients:2.1.0:test')
  testImplementation('org.apache.kafka:kafka_2.12:2.1.0')
  testImplementation('org.apache.kafka:kafka_2.12:2.1.0:test')
  testImplementation('io.confluent:kafka-schema-registry:5.1.0')
  testImplementation('io.confluent:kafka-schema-registry:5.1.0:tests')
  testImplementation('com.github.java-json-tools:json-schema-validator:2.2.10')
  testImplementation("com.github.cedardevs.schemas:schemas-core:${project.schemasVersion}:test")
}

sourceCompatibility = '11'

sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output + sourceSets.test.output
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    groovy.srcDir file('src/integrationTest/groovy')
    resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test) {
  description = 'Runs the integration tests'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
  shouldRunAfter test

  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination =  file("${buildDir}/reports/integrationTests")
}

check.dependsOn integrationTest

war {
  dependsOn { 'generateOpenApi' }
  enabled = true // build a deployable war in addition to the executable one
  classpath -= files(configurations.compileOnly)
  baseName = "${rootProject.name}-${project.name}"
}

bootWar {
  // we're building a regular war and bootable jar, don't need a bootable war as well
  enabled = false
}

bootJar {
  dependsOn { 'generateOpenApi' }
  classifier = 'all' // add a classifier to distinguish the executable jar
  baseName = "${rootProject.name}-${project.name}"
  launchScript()
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

task extractSchemaDefinitions(type: Copy) {
  dependsOn configurations.schemaDefinitions
  from { // use of closure defers evaluation until execution time
    configurations.schemaDefinitions.collect {
      zipTree(it).matching{
        include 'json/schema-definitions.json'
      }
    }
  }

  into "$buildDir/resources/main"
}

node {
  version = '10.15.3'
  npmVersion = '6.1.0'
  download = true
}

// NOTE: The 'build' task defined in package.json pipes the output directly to the output file
task generateOpenApi(type: NpmTask) {
  dependsOn { ['npmInstall', 'extractSchemaDefinitions', 'processResources'] }
  args = ['run', 'build']
  outputs.file("$buildDir/resources/main/static/openapi.yaml")
}

docker {
  additionalBuildArgs = [JAR_NAME: bootJar.outputs.files.singleFile.name]
}

BuildDockerImage.dependsOn(bootJar)
assemble.dependsOn(BuildDockerImage)
assemble.dependsOn(sourceJar)
assemble.dependsOn(bootJar)
PublishDockerImage.dependsOn(BuildDockerImage)
task publish { dependsOn PublishDockerImage }
