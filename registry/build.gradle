plugins {
  id 'war'
  id 'groovy'
  id 'jacoco'
  id "org.springframework.boot" version "2.1.1.RELEASE"
  id "io.spring.dependency-management" version "1.0.6.RELEASE"
  id 'org.cedar.dockerplugin' version '1.0.3'
  id "com.moowork.node"
}

configurations {
  compile.exclude module: 'tomcat-annotations-api', group: 'org.apache.tomcat'
  testCompile.exclude(group: 'ch.qos.logback')

  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  
  schemaDefinitions
}

dependencies {
  compile('org.codehaus.groovy:groovy')
  compile('org.codehaus.groovy:groovy-json')
  compile('org.springframework.boot:spring-boot-starter-actuator')
  compile('org.springframework.boot:spring-boot-starter-web')
  compile('org.apache.kafka:kafka-streams:2.1.0')
  compile('org.apache.kafka:kafka-clients:2.1.0')
  compile('io.confluent:kafka-streams-avro-serde:5.1.0')
  compile(project(':common'))
  //configure  to unzip and copy schema definitions 
  schemaDefinitions ('com.github.cedardevs:schemas:0.1.1')

  compileOnly('org.springframework.boot:spring-boot-starter-tomcat')

  runtime('org.springframework.boot:spring-boot-devtools')

  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile("org.spockframework:spock-spring:${project.spockVersion}")
  testCompile("org.spockframework:spock-core:${project.spockVersion}")
  testCompile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1')
  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('org.springframework.kafka:spring-kafka-test:2.2.3.RELEASE')
  testCompile('org.apache.kafka:kafka-streams-test-utils:2.1.0')
  testCompile('org.apache.kafka:kafka-clients:2.1.0:test')
  testCompile('org.apache.kafka:kafka_2.12:2.1.0')
  testCompile('org.apache.kafka:kafka_2.12:2.1.0:test')
  testCompile('io.confluent:kafka-schema-registry:5.1.0')
  testCompile('io.confluent:kafka-schema-registry:5.1.0:tests')
  testCompile('com.github.java-json-tools:json-schema-validator:2.2.10')
  testCompile('com.github.cedardevs:schemas:0.1.1:test')
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integrationTest/groovy')
//    resources.srcDir file("src/main/resources")
    compileClasspath += main.output + test.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
}

task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
  mustRunAfter 'test'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination =  file("${buildDir}/reports/integrationTests")
}

check.dependsOn integrationTest

war {
  // build a deployable war in addition to the executable one
  enabled = true
  classpath -= files(configurations.compileOnly)
  baseName = "${rootProject.name}-${project.name}"
}

bootWar {
  // we're building a regular war and bootable jar, don't need a bootable war as well
  enabled = false
}

bootJar {
  // add a classifier to distinguish the executable jar
  classifier = 'all'
  baseName = "${rootProject.name}-${project.name}"
  launchScript()
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

task extractSchemaDefinitions(type: Copy) {
  dependsOn configurations.schemaDefinitions
    from { // use of closure defers evaluation until execution time
      configurations.schemaDefinitions.collect {
        zipTree(it).matching{
          include 'json/schema-definitions.json'
        }
      }
    }

  into "$buildDir/resources/main"
}

assemble.dependsOn(extractSchemaDefinitions)

// NOTE: there is a bug in speccy where it outputs an empty file with --output or -o flag 
// (there is a pull request: https://github.com/wework/speccy/pull/270)
task generateOpenApi(type: Exec) {
  dependsOn 'npmInstall'
  executable = "bash"
  args = ["-c", "npm run build > $buildDir/tmp/openApi.yml"] // no need to pip once the pull request merge 
}

// once the speccy fix is merged, this task should be remove 
task fixspeccy(type: Copy) {
  dependsOn 'generateOpenApi'
  from "$buildDir/tmp/"
  include 'openApi.yml'
  into "$buildDir/resources/main/static"

  eachFile { file ->
    file.file.text = file.file.readLines()[4..-1].join("\n")
  }
}

assemble.dependsOn(fixspeccy)

docker {
  additionalBuildArgs = [JAR_NAME: bootJar.outputs.files.singleFile.name]
}

BuildDockerImage.dependsOn(bootJar)
assemble.dependsOn(BuildDockerImage)
assemble.dependsOn(sourceJar)
assemble.dependsOn(bootJar)
PublishDockerImage.dependsOn(BuildDockerImage)
task publish { dependsOn PublishDockerImage }
