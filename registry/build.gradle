buildscript {
  ext {
    springBootVersion = '2.0.4.RELEASE'
    springCloudVersion = 'Finchley.RC2'
  }
  repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot' // version declared in top-level buildscript
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.cedar.dockerplugin'

configurations {
  compile.exclude module: 'tomcat-annotations-api', group: 'org.apache.tomcat'
  testCompile.exclude(group: 'ch.qos.logback')

  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

repositories {
  maven { url 'https://packages.confluent.io/maven/' }
}

dependencies {
  compile('org.codehaus.groovy:groovy')
  compile('org.codehaus.groovy:groovy-json')
  compile('org.springframework.boot:spring-boot-starter-actuator')
  compile('org.springframework.boot:spring-boot-starter-web')
  compile('org.springframework.cloud:spring-cloud-starter')
  compile('org.apache.kafka:kafka-streams:2.0.0')
  compile('org.apache.kafka:kafka-clients:2.0.0')
  compile('io.confluent:kafka-streams-avro-serde:5.0.0')
  compile('org.apache.avro:avro:1.8.2')
  compile(project(':common'))

  compileOnly('org.springframework.boot:spring-boot-starter-tomcat')

  runtime('org.springframework.boot:spring-boot-devtools')

  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile("org.spockframework:spock-spring:${project.spockVersion}")
  testCompile("org.spockframework:spock-core:${project.spockVersion}")
  testCompile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1')
  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('org.apache.kafka:kafka-streams-test-utils:2.0.0')
  testCompile('org.apache.kafka:kafka-clients:2.0.0:test')
  testCompile('org.apache.kafka:kafka_2.12:2.0.0')
  testCompile('org.apache.kafka:kafka_2.12:2.0.0:test')
//    testCompile('org.springframework.kafka:spring-kafka-test')
  // specify latest spring kafka version for Kafka 2.0.0 Compatibility
  testCompile('org.springframework.kafka:spring-kafka-test:2.2.0.M1')
  testCompile('io.confluent:kafka-schema-registry:5.0.0')
  testCompile('io.confluent:kafka-schema-registry:5.0.0:tests')
  testCompile('com.github.java-json-tools:json-schema-validator:2.2.10')
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integrationTest/groovy')
//    resources.srcDir file("src/main/resources")
    compileClasspath += main.output + test.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
  mustRunAfter 'test'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination =  file("${buildDir}/reports/integrationTests")
}

check.dependsOn integrationTest

war {
  // build a deployable war in addition to the executable one
  enabled = true
  classpath -= files(configurations.compileOnly)
  baseName = "${rootProject.name}-${project.name}"
}

bootWar {
  // we're building a regular war and bootable jar, don't need a bootable war as well
  enabled = false
}

bootJar {
  // add a classifier to distinguish the executable jar
  classifier = 'all'
  baseName = "${rootProject.name}-${project.name}"
  launchScript()
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

docker {
  additionalBuildArgs = [JAR_NAME: bootJar.outputs.files.singleFile.name]
}

BuildDockerImage.dependsOn(bootJar)
assemble.dependsOn(BuildDockerImage)
assemble.dependsOn(sourceJar)
assemble.dependsOn(bootJar)
PublishDockerImage.dependsOn(BuildDockerImage)
task publish { dependsOn PublishDockerImage }
