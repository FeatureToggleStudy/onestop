import com.moowork.gradle.node.task.NodeTask

apply plugin: "com.moowork.node"
apply from: "${rootDir}/gradle/publishing.gradle"

node {
    version = '6.3.1'
    download = true
}

clean {
    doFirst {
        file("${projectDir}/dist").deleteDir()
        file("${buildDir}/libs").deleteDir()
    }
}

def sourceDirs = ['node_modules', 'img', 'src', 'style']

task compile(type: NodeTask) {
    dependsOn 'npmInstall'
    sourceDirs.each {
        inputs.dir(it).skipWhenEmpty()
    }
    outputs.dir('dist')
    script = file('node_modules/.bin/webpack')
    args = ['--bail', '--config', 'webpack.config.prod.js', '-p']
    execOverrides {
        it.environment 'NODE_ENV', 'production'
    }
    doFirst {
        // Remove previous outputs. Doesn't run if the task if UP-TO-DATE
        file("${projectDir}/dist").deleteDir()
    }
}

task tarResults(type: Tar) {
    dependsOn 'compile'

    from "${projectDir}/dist"
    baseName = 'onestop-client'
    version = project.version
    compression = 'gzip'
    extension = 'tar.gz'
    destinationDir = file("${buildDir}/libs")
}

assemble.dependsOn 'tarResults'

npm_test {
    dependsOn 'compile'
    sourceDirs.each {
        inputs.dir(it).skipWhenEmpty()
    }
    inputs.dir('test').skipWhenEmpty()
}

task test {
    dependsOn 'npm_test'
}

check {
    dependsOn 'test'
}

build {
    dependsOn 'assemble', 'check'
}

publishing {
    publications {
        main(MavenPublication) {
            artifact tarResults.outputs.files.singleFile, {
                extension 'tar.gz'
            }
            artifactId "${rootProject.name}-${project.name}"
        }
    }
}

static def getDateTime() {
  return new Date().format("YYYY-MM-DD'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))
}

task dockerImage(type: Exec, description: 'Creates a docker image with the current jar.', group: 'docker') {
  dependsOn tarResults
  executable "bash"
  args "-c", "docker build --no-cache \
    --build-arg VCS_REF=\$(git rev-parse --short HEAD) \
    --build-arg VERSION=${project.version} \
    --build-arg DATE=" + getDateTime() + " \
    -t cedardevs/${rootProject.name}-${project.name}:${project.version} ."
}

assemble.dependsOn dockerImage

task publishImage(type: Exec, description: 'Publishes the docker image', group: 'publish') {
  dependsOn "dockerImage"
  executable "bash"
  args "-c", "docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD && docker push cedardevs/${rootProject.name}-${project.name}:${project.version} && docker logout"
}

artifactoryPublish.dependsOn publishImage

task promote(type: Exec, description: 'Publishes the promoted docker image', group: 'publish') {
  dependsOn dockerImage
  executable "bash"
  args "-c", "docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD && \
    docker tag cedardevs/${rootProject.name}-${project.name}:${project.version} cedardevs/${rootProject.name}-${project.name}:$baseVersion && \
    docker tag cedardevs/${rootProject.name}-${project.name}:${project.version} cedardevs/${rootProject.name}-${project.name}:latest &&\
    docker push cedardevs/${rootProject.name}-${project.name}:$baseVersion &&\
    docker push cedardevs/${rootProject.name}-${project.name}:latest && \
    docker logout"
}
