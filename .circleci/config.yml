# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#

defaults: &defaults
  machine: true
  working_directory: ~/repo

restoreCache: &restoreCache
  # Download and cache dependencies
  restore_cache:
      keys:
      - onestop-cache-v3-{{ checksum "build.gradle" }}
      # fallback to using the latest cache if no exact match is found
      - onestop-cache-v3-

saveCache: &saveCache
  save_cache:
      paths:
        - ~/.gradle/caches/
        - ~/.gradle/wrapper/
        - .gradle
        - buildSrc/.gradle
        - client/.gradle
        - client/node_modules
      key: onestop-cache-v3-{{ checksum "build.gradle" }}

persistWorkspace: &persistWorkspace
  persist_to_workspace:
      root: ~/repo
      paths:
        - .

attachWorkspace: &attachWorkspace
  - attach_workspace:
      at: ~/repo

version: 2
jobs:
  meta-build:
    <<: *defaults
    steps:
      - checkout

      - <<: *restoreCache

      - run:
          name: Build Api-Metadata
          command: ./gradlew api-metadata:assemble

      - <<: *saveCache

      - <<: *persistWorkspace

  meta-test:
    <<: *defaults
    steps:
      - <<: *attachWorkspace

      - run:
          name: Api-Metadata Unit Tests
          command: ./gradlew api-metadata:test

      - <<: *saveCache

      - persist_to_workspace:
          root: ~/repo
          paths:
            - api-metadata/build/jacoco/test.exec
            - api-metadata/build/test-results/test
            - api-metadata/build/reports/test

  meta-integration-test:
    <<: *defaults
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
    # requires:
    #   - meta-build
    steps:
      - <<: *attachWorkspace

      - run:
          name: Increase Virtual Memory Limits for Elasticsearch
          command: sudo sysctl -w vm.max_map_count=262144

      - run:
          name: Generate Dummy Keystore
          command: ./gradlew jks

      - run:
          name: Api-Metadata Integration Tests
          command: ./gradlew api-metadata:integrationTest

      - <<: *saveCache

      - persist_to_workspace:
          root: ~/repo
          paths:
            - api-metadata/build/jacoco/integrationTest.exec
            - api-metadata/build/test-results/integrationTest
            - api-metadata/build/reports/integrationTest

  meta-publish:
    <<: *defaults

    steps:
      - <<: *attachWorkspace

      - run:
          name: Api-Metadata Docker Image
          command: ./gradlew api-metadata:buildDockerImage

      - deploy:
          name: Publish Images
          command: ./gradlew publish -x BuildDockerImage

  meta-report-tests:
    <<: *defaults

    steps:
      - <<: *attachWorkspace

      - run:
          name: Api-Metadata Tests Report
          command: ./gradlew api-metadata:jacocoTestReport

      - run:
          name: Save test results
          command: |
            mkdir -p ~/tests/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/tests/junit/ \;
            find . -type f -regex ".*/build/integration-test-results/.*xml" -exec cp {} ~/tests/junit/ \;
            find . -type f -regex ".*/build/coverage/junit/.*xml" -exec cp {} ~/tests/junit/ \;
          when: always

      - run:
          name: Save coverage results
          command: |
            mkdir -p ~/tests/coverage/
            find . -type d -regex ".*/build/reports/jacoco/" -exec cp -r {} ~/tests/coverage/ \;
            find . -type d -regex ".*/build/coverage/lcov-report/" -exec cp -r {} ~/tests/coverage/ \;
          when: always

      - run:
          name: Post coverage results to codecov
          command: |
            bash <(curl -s https://codecov.io/bash)

      - store_test_results:
          path: ~/tests

      - store_artifacts:
          path: ~/tests



  build:
    machine: true
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - onestop-cache-v3-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - onestop-cache-v3-

      # Virtual Memory for Elasticsearch:
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html
      - run:
          name: Increase Virtual Memory Limits for Elasticsearch
          command: sudo sysctl -w vm.max_map_count=262144

      # build it!
      - run:
          name: Generate Dummy Keystore and Build
          command: ./gradlew jks && ./gradlew build
          no_output_timeout: 30m

      - run:
          name: Save test results
          command: |
            mkdir -p ~/tests/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/tests/junit/ \;
            find . -type f -regex ".*/build/integration-test-results/.*xml" -exec cp {} ~/tests/junit/ \;
            find . -type f -regex ".*/build/coverage/junit/.*xml" -exec cp {} ~/tests/junit/ \;
          when: always

      - run:
          name: Save coverage results
          command: |
            mkdir -p ~/tests/coverage/
            find . -type d -regex ".*/build/reports/jacoco/" -exec cp -r {} ~/tests/coverage/ \;
            find . -type d -regex ".*/build/coverage/lcov-report/" -exec cp -r {} ~/tests/coverage/ \;
          when: always

      - run:
          name: Post coverage results to codecov
          command: |
            bash <(curl -s https://codecov.io/bash)

      - store_test_results:
          path: ~/tests

      - store_artifacts:
          path: ~/tests

      - save_cache:
          paths:
            - ~/.gradle/caches/
            - ~/.gradle/wrapper/
            - .gradle
            - api-search/build
            - api-search/dist
            - api-metadata/build
            - api-metadata/dist
            - buildSrc/.gradle
            - buildSrc/build
            - client/.gradle
            - client/node_modules
            - client/build
          key: onestop-cache-v3-{{ checksum "build.gradle" }}

      - deploy:
          name: Publish
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ] || [ "${CIRCLE_BRANCH}" == "release/*" ]; then
              ./gradlew publish -x BuildDockerImage
            fi
  checkCVE:
    machine: true
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - onestop-cache-v3-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - onestop-cache-v3-

      # build it!
      - run:
          name: Generate Dummy Keystore and Build
          command: ./gradlew dependencyCheckAnalyze
          no_output_timeout: 30m

      - save_cache:
          paths:
            - ~/.gradle/caches/
            - ~/.gradle/wrapper/
            - .gradle
            - api-search/build
            - api-search/dist
            - api-metadata/build
            - api-metadata/dist
            - buildSrc/.gradle
            - buildSrc/build
            - client/.gradle
            - client/node_modules
            - client/build
          key: onestop-cache-v3-{{ checksum "build.gradle" }}

workflows:
  version: 2
  build-api-metadata:
    jobs:
      - meta-build
      - meta-test:
          requires:
            - meta-build
      - meta-integration-test:
          requires:
            - meta-build
      - meta-report-tests:
          requires:
            - meta-test
            - meta-integration-test
      - meta-publish:
          filters:  # using regex filters requires the entire branch to match
            branches:
              only:  # only branches matching the below regex filters will run
                - master
                - /release.*/
          requires:
            - meta-test
            - meta-integration-test
  # build:
  #   jobs:
  #     - build
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - checkCVE
