apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot' // version declared in top-level buildscript
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.cedar.dockerplugin'
apply from: "${rootDir}/gradle/publishing.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()

  // opensaml repo
  maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
  // avro serdes from confluent
  maven { url 'https://packages.confluent.io/maven/' }
  // for shared avro schemas from https://github.com/cedardevs/schemas
  maven { url "https://jitpack.io" }
}

configurations {
  compile.exclude module: 'tomcat-annotations-api', group: 'org.apache.tomcat'
}

dependencies {
  // Kafka dependencies for connecting with PSI
  compile('com.github.cedardevs:schemas:0.1.1')
  compile("io.confluent:kafka-streams-avro-serde:5.1.0")
  compile("org.apache.kafka:kafka-clients:2.1.1")
  compile("org.springframework.kafka:spring-kafka:2.2.4.RELEASE")
  testCompile("com.github.cedardevs:schemas:0.1.1:test")
  testCompile("io.confluent:kafka-schema-registry:5.1.0")
  testCompile("io.confluent:kafka-schema-registry:5.1.0:tests")
  testCompile("org.apache.kafka:kafka_2.11:2.1.1")
  testCompile("org.apache.kafka:kafka_2.11:2.1.1:test")
  testCompile("org.apache.kafka:kafka-clients:2.1.1:test")
  testCompile("org.springframework.kafka:spring-kafka-test:2.2.4.RELEASE")

  // opensaml
  compile("org.opensaml:opensaml-core:${project.openSAMLVersion}")
  compile("org.opensaml:opensaml-saml-api:${project.openSAMLVersion}")
  compile("org.opensaml:opensaml-saml-impl:${project.openSAMLVersion}")
  compile("org.opensaml:opensaml-messaging-api:${project.openSAMLVersion}")
  compile("org.opensaml:opensaml-messaging-impl:${project.openSAMLVersion}")
  compile("org.opensaml:opensaml-soap-api:${project.openSAMLVersion}")
  compile("org.opensaml:opensaml-soap-impl:${project.openSAMLVersion}")

  // logback
  compile("ch.qos.logback:logback-core:${project.logbackVersion}")
  compile("ch.qos.logback:logback-classic:${project.logbackVersion}")

  // javax servlet
  compile("javax.servlet:javax.servlet-api:${project.javaxServletAPIVersion}")

  // junit
  testCompile("junit:junit:${project.junitVersion}")
  testCompile("org.springframework.security:spring-security-test")


  compile "org.codehaus.groovy:groovy:${project.groovyVersion}"
  compile "org.codehaus.groovy:groovy-json:${project.groovyVersion}"
  compile "org.codehaus.groovy:groovy-xml:${project.groovyVersion}"
  compile "org.elasticsearch.client:elasticsearch-rest-client:${project.esVersion}"
  compile "org.springframework.boot:spring-boot-starter-web"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-security"
  compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
  compile "org.springframework.boot:spring-boot-devtools"
  compile 'org.springframework.cloud:spring-cloud-context'
  compile 'com.github.java-json-tools:json-schema-validator:2.2.8'
  compile 'org.apache.commons:commons-text:1.2'
  compile 'org.apache.lucene:lucene-expressions:7.2.1'

  // Authorization Services
  compile "org.springframework.boot:spring-boot-starter-data-jpa"
  /*
  // note: apparently i'm missing a depencancy from starter-data-jpa, because securityenabled is super messed up with this subset instead:
  compile group: 'javax.transaction', name: 'javax.transaction-api', version: '1.3'
  // provided group: 'javax.persistence', name: 'com.springsource.javax.persistence', version: '2.0.0'
  //
  compile 'javax.persistence:javax.persistence-api:2.2'
  compile group: 'org.springframework.data', name: 'spring-data-commons', version: '2.1.4.RELEASE'
  compile group: 'org.springframework', name: 'spring-jdbc', version: '5.1.4.RELEASE'
  */
  compile 'org.liquibase:liquibase-core'
  // compile 'com.h2database:h2:1.4.197'
  // compile 'postgresql:postgresql:42.2.5'
  // compile 'com.oracle.jdbc:ojdbc8:18.3.0.0'
  // compile group: 'ojdbc', name: 'ojdbc', version: '14'
  // compile group: 'oracle', name: 'ojdbc', version: '1.4'
// compile group: 'OJDBC', name: 'ojdbc', version: '14'
// compile group: 'com.oracle.jdbc', name: 'ojdbc8', version: '12.2.0.1'
compile group: 'org.hsqldb', name:'hsqldb', version: '2.3.4' // TODO seems to work fine!
// compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.25.2'
// compile group: 'org.apache.derby', name: 'derby', version: '10.13.1.1'
  // version to override another library's dependency to solve a CVE:
  compile 'com.google.guava:guava:27.0.1-jre'
  compile 'commons-collections:commons-collections:3.2.2'

  runtime 'org.springframework.boot:spring-boot-devtools'

  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

  testCompile "org.spockframework:spock-spring:${project.spockVersion}"
  testCompile "org.spockframework:spock-core:${project.spockVersion}"
  testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile "org.testcontainers:testcontainers:1.10.0"
  testCompile "org.testcontainers:elasticsearch:1.10.0"
  testCompile 'net.bytebuddy:byte-buddy:1.7.11'
}

ext {
  fatWarPath = file("${buildDir}/libs/${rootProject.name}-${project.name}-all-${project.version}.war")
}

war {
  enabled = true
  // TODO disabled dynamic project-based name for #827, plan to re-enable in #828
  // baseName = "${rootProject.name}-${project.name}"
  baseName = "onestop-metadata"
  finalizedBy bootWar
}

bootWar {
  excludeDevtools = true
  classifier = 'all'
  launchScript()
  onlyIf { !tasks.getByName('war').state.upToDate }
}

sourceSets {
  integrationTest {
    groovy.srcDir file('src/integrationTest/groovy')
    resources.srcDir file("${project(':e2e-tests').projectDir}/src/test/resources")
    compileClasspath += main.output + test.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
  main {
    resources.srcDir file("${project(':index-configuration').projectDir}/src/main/resources")
  }
}

task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
  mustRunAfter 'test'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination = file("${buildDir}/reports/integrationTests")
}

check.dependsOn integrationTest

task sourceJar(type: Jar) {
  classifier "sources"

  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

build.dependsOn sourceJar

publishing {
  publications {
    main(MavenPublication) {
      artifact war
      artifactId "${rootProject.name}-${project.name}"
      artifact tasks.sourceJar
    }
  }
}

processResources {
  outputs.upToDateWhen { false }
  filesMatching("**/application.yml") {
    expand( project.properties )
  }
}

docker {
  additionalBuildArgs = [WAR_NAME: bootWar.outputs.files.singleFile.name]
}

BuildDockerImage.dependsOn(bootWar)
// assemble.dependsOn(BuildDockerImage)
PublishDockerImage.dependsOn(BuildDockerImage)
publish.dependsOn PublishDockerImage
