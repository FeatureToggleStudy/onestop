package org.cedar.onestop.api.metadata.serviceimport groovy.json.JsonSlurperimport spock.lang.Specificationimport spock.lang.Unroll@Unrollclass LoadKafkaMsgServiceTest extends Specification {  def mockElasticsearchService = Mock(ElasticsearchService)  def metadataManagementService = new MetadataManagementService(mockElasticsearchService)    def setup() {    metadataManagementService.PREFIX = 'prefix-'    metadataManagementService.COLLECTION_SEARCH_INDEX = 'search_collection'    metadataManagementService.COLLECTION_STAGING_INDEX = 'staging_collection'    metadataManagementService.GRANULE_SEARCH_INDEX = 'search_granule'    metadataManagementService.GRANULE_STAGING_INDEX = 'staging_granule'    metadataManagementService.FLAT_GRANULE_SEARCH_INDEX = 'search_flattened_granule'  }    def "dummy" () {    given:    def inputMsg = ClassLoader.systemClassLoader.getResourceAsStream('parsed-iso.json').text    def inputMap = [:]    inputMap.put('discovery', new JsonSlurper().parseText(inputMsg))    def expectedAnalysisMap = [        identification  : [            fileIdentifier    : [                exists: true            ],            doi               : [                exists: true            ],            parentIdentifier  : [                exists: false            ],            hierarchyLevelName: [                exists            : false,                matchesIdentifiers: false            ]        ],        titles          : [            title: [                exists: true,                characters: 63            ],            alternateTitle: [                exists: true,                characters: 51            ]        ]    ]    inputMap.put('analysis', expectedAnalysisMap)    inputMap.put('id', '123')        when:    Map msgMap = metadataManagementService.loadParsedMetadata(inputMap)    Map expectedMap = new JsonSlurper().parseText(inputMsg) as Map        then:    msgMap.data.id == ['123']    msgMap.data.type == ['granule']    msgMap.data.attributes == [expectedMap]  }}