package org.cedar.onestop.api.metadata.serviceimport groovy.json.JsonSlurperimport spock.lang.Specificationimport spock.lang.Unroll@Unrollclass ManipulateMetadtaServiceTest extends Specification {  def inputMsg = ClassLoader.systemClassLoader.getResourceAsStream('parsed-iso.json').text  def inputMap = [discover: new JsonSlurper().parseText(inputMsg)] as Map    def "Create GCMD keyword lists" () {    given:    def keywords = inputMap.discover as Map      when:    Map parsedKeywords = ManipulateMetadataService.createGcmdKeyword( keywords)        then:    parsedKeywords.gcmdScienceServices == [] as Set    parsedKeywords.gcmdScience == [        'Atmosphere',        'Atmosphere > Atmospheric Temperature',        'Atmosphere > Atmospheric Temperature > Surface Temperature',        'Atmosphere > Atmospheric Temperature > Surface Temperature > Dew Point Temperature',        'Oceans',        'Oceans > Salinity/Density',        'Oceans > Salinity/Density > Salinity',        'Spectral/Engineering',        'Spectral/Engineering > Microwave',        'Spectral/Engineering > Microwave > Brightness Temperature',        'Spectral/Engineering > Microwave > Temperature Anomalies',        'Volcanoes',        'Volcanoes > This Keyword',        'Volcanoes > This Keyword > Is Invalid'    ] as Set    parsedKeywords.gcmdLocations == [        'Geographic Region',        'Geographic Region > Arctic',        'Ocean',        'Ocean > Atlantic Ocean',        'Ocean > Atlantic Ocean > North Atlantic Ocean',        'Ocean > Atlantic Ocean > North Atlantic Ocean > Gulf Of Mexico',        'Liquid Earth',        'Liquid Earth > This Keyword',        'Liquid Earth > This Keyword > Is Invalid'    ] as Set    parsedKeywords.gcmdInstruments == [] as Set    parsedKeywords.gcmdPlatforms == [] as Set    parsedKeywords.gcmdProjects == [] as Set    parsedKeywords.gcmdDataCenters == [        'SIO > Super Important Organization',        'OSIO > Other Super Important Organization',        'SSIO > Super SIO (Super Important Organization)'    ] as Set    parsedKeywords.gcmdHorizontalResolution == [] as Set    parsedKeywords.gcmdVerticalResolution == ['> 1 Km'] as Set    parsedKeywords.gcmdTemporalResolution == ['Seasonal'] as Set        and: "should recreate keywords with out accession values"    parsedKeywords.keywords.namespace != 'NCEI ACCESSION NUMBER'  }    def "Create contacts, publishers and creators from responsibleParties" () {    given:    def responsiblePartiesMap = inputMap.discover.responsibleParties as Map        when:    Map responsibleParties = ManipulateMetadataService.parseDataResponsibleParties(responsiblePartiesMap)        then:    responsibleParties.contacts == [        [            individualName  : 'John Smith',            organizationName: 'University of Boulder',            positionName    : 'Chief Awesomeness Officer',            role            : 'pointOfContact',            email           :  "NCEI.Info@noaa.gov",            phone           : '555-555-5555'        ]    ] as Set    responsibleParties.creators == [        [            individualName  : 'Edward M. Armstrong',            organizationName: 'US NASA; Jet Propulsion Laboratory (JPL)',            positionName    : null,            role            : 'originator',            email           : 'edward.m.armstrong@jpl.nasa.gov',            phone           : '555-555-5559'        ],        [            individualName  : 'Jarianna Whackositz',            organizationName: 'Secret Underground Society',            positionName    : 'Software Developer',            role            : 'resourceProvider',            email           : 'jw@mock-creator-email.org',            phone           : '555-555-5558'        ]    ] as Set    responsibleParties.publishers == [        [            individualName  : null,            organizationName: 'Super Important Organization',            positionName    : null,            role            : 'publisher',            email           : 'email@sio.co',            phone           : '555-123-4567'        ]    ] as Set  }    def "new record is ready for onestop" () {    given:    def recordMap = inputMap.discover as Map      when:    def metadata = ManipulateMetadataService.oneStopReady(recordMap)      then:    metadata.services == null    metadata.responsibleParties == null    metadata.contacts == [        [            individualName  : 'John Smith',            organizationName: 'University of Boulder',            positionName    : 'Chief Awesomeness Officer',            role            : 'pointOfContact',            email           :  "NCEI.Info@noaa.gov",            phone           : '555-555-5555'        ]    ] as Set    metadata.gcmdDataCenters == [        'SIO > Super Important Organization',        'OSIO > Other Super Important Organization',        'SSIO > Super SIO (Super Important Organization)'    ] as Set  }}