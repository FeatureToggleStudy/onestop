apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ template "elasticsearch.fullname" . }}
  labels:
    app: {{ template "elasticsearch.name" . }}
    chart: {{ template "elasticsearch.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "elasticsearch.fullname" . }}-transport
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: {{ template "elasticsearch.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "elasticsearch.name" . }}
        release: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: 102
      initContainers:
        - name: init-sysctl
          image: busybox:1
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
          securityContext:
            privileged: true
        - name: init-volume
          image: busybox:1
          command: ["chgrp", "-v", "102", "/data" ]
          volumeMounts:
            - name: data
              mountPath: "/data"
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 9200
              protocol: TCP
            - name: transport
              containerPort: 9300
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: "/usr/share/elasticsearch/data"
          env:
            - name: cluster.name
              value: {{ .Values.cluster.name }}
            - name: discovery.zen.ping.unicast.hosts
              value: "{{ template "elasticsearch.fullname" . }}-transport"
            - name: discovery.zen.minimum_master_nodes
              value: "{{ div .Values.replicaCount 2 | add1 }}"
            - name: ES_JAVA_OPTS
              value: "-Xms{{ .Values.cluster.heapMi }}m -Xmx{{ .Values.cluster.heapMi }}m"
            # TODO - lock the memory
            - name: xpack.security.enabled
              value: "{{ .Values.cluster.xpackEnabled }}"
            - name: xpack.watcher.enabled
              value: "{{ .Values.cluster.xpackEnabled }}"
            - name: xpack.monitoring.enabled
              value: "{{ .Values.cluster.xpackEnabled }}"
            - name: xpack.ml.enabled
              value: "{{ .Values.cluster.xpackEnabled }}"
            - name: xpack.graph.enabled
              value: "{{ .Values.cluster.xpackEnabled }}"
            {{- range $key, $value :=  .Values.cluster.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          resources:
            limits:
              cpu: {{ .Values.cluster.cpu }}
              memory: {{ mul 2 .Values.cluster.heapMi }}Mi
            requests:
              cpu: {{ .Values.cluster.cpu }}
              memory: {{ .Values.cluster.heapMi }}Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                          - {{ template "elasticsearch.name" . }}
                  topologyKey: "kubernetes.io/hostname"
    {{- with .Values.nodeSelector }}
    nodeSelector:
  {{ toYaml . | indent 8 }}
  {{- end }}

  {{- with .Values.tolerations }}
tolerations:
  {{ toYaml . | indent 8 }}
  {{- end }}
volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
  {{- if .Values.cluster.storageClass }}
storageClassName: {{ .Values.cluster.storageClass }}
  {{- end }}
resources:
  requests:
    storage: {{ .Values.cluster.diskGi }}Gi