---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "psi-dev.fullname" . }}-kafka-manager-ingress
  labels:
    app: {{ template "psi-dev.name" . }}-kafka-manager
    chart: {{ template "psi-dev.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /kafka-manager/
spec:
  rules:
  - http:
      paths:
      - path: /kafka-manager/
        backend:
          serviceName: {{ template "psi-dev.fullname" . }}-kafka-manager
          servicePort: {{ index .Values "kafka-manager" "service" "port" }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "psi-dev.fullname" . }}-kafka-manager
  labels:
    app: {{ template "psi-dev.name" . }}-kafka-manager
    chart: {{ template "psi-dev.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ index .Values "kafka-manager" "service" "type" }}
  ports:
    - port: {{ index .Values "kafka-manager" "service" "port" }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "psi-dev.name" . }}-kafka-manager
    release: {{ .Release.Name }}

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "psi-dev.fullname" . }}-kafka-manager
  labels:
    app: {{ template "psi-dev.name" . }}-kafka-manager
    chart: {{ template "psi-dev.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ index .Values "kafka-manager" "replicaCount" }}
  selector:
    matchLabels:
      app: {{ template "psi-dev.name" . }}-kafka-manager
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "psi-dev.name" . }}-kafka-manager
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: kafka-manager
        image: "{{ index .Values "kafka-manager" "image" "repository" }}:{{ index .Values "kafka-manager" "image" "tag" }}"
        imagePullPolicy: {{ index .Values "kafka-manager" "image" "pullPolicy" }}
        ports:
        - name: http
          containerPort: 9000
        env:
        - name: ZK_HOSTS
          value: "{{ template "psi-dev.zookeeper.url" . }}"
        - name: KM_CONTEXT_PATH
          value: "kafka-manager"
        volumeMounts:
        - name: config
          mountPath: /kafka-manager/conf
{{/* TODO - readiness, liveness */}}
        resources:
{{ toYaml (index .Values "kafka-manager" "resources") | indent 10 }}
      volumes:
      - name: config
        configMap:
          name: {{ template "psi-dev.fullname" . }}-manager-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "psi-dev.fullname" . }}-manager-config
labels:
  app: {{ template "psi-dev.name" . }}-manager-config
  chart: {{ template "psi-dev.chart" . }}-manager-config
  release: {{ .Release.Name }}
  heritage: {{ .Release.Service }}
data:
  application.conf: |-
   # Copyright 2015 Yahoo Inc. Licensed under the Apache License, Version 2.0
   # See accompanying LICENSE file.
   # This is the main configuration file for the application.
   # ~~~~~
   # Secret key
   # ~~~~~
   # The secret key is used to secure cryptographics functions.
   # If you deploy your application to several instances be sure to use the same key!
   play.crypto.secret="^<csmm5Fx4d=r2HEX8pelM3iBkFVv?k[mc;IZE<_Qoq8EkX_/7@Zt6dP05Pzea3U"
   play.crypto.secret=${?APPLICATION_SECRET}
   # The application languages
   # ~~~~~
   play.i18n.langs=["en"]
   play.http.requestHandler = "play.http.DefaultHttpRequestHandler"
   play.http.context = "/kafka-manager/" # <<----- CHANGED
   play.application.loader=loader.KafkaManagerLoader
   kafka-manager.zkhosts="kafka-manager-zookeeper:2181"
   kafka-manager.zkhosts=${?ZK_HOSTS}
   pinned-dispatcher.type="PinnedDispatcher"
   pinned-dispatcher.executor="thread-pool-executor"
   application.features=["KMClusterManagerFeature","KMTopicManagerFeature","KMPreferredReplicaElectionFeature","KMReassignPartitionsFeature"]
   akka {
     loggers = ["akka.event.slf4j.Slf4jLogger"]
     loglevel = "INFO"
   }
   basicAuthentication.enabled=false
   basicAuthentication.enabled=${?KAFKA_MANAGER_AUTH_ENABLED}
   basicAuthentication.username="admin"
   basicAuthentication.username=${?KAFKA_MANAGER_USERNAME}
   basicAuthentication.password="password"
   basicAuthentication.password=${?KAFKA_MANAGER_PASSWORD}
   basicAuthentication.realm="Kafka-Manager"
   basicAuthentication.excluded=["/api/health"] # ping the health of your instance without authentification
   kafka-manager.consumer.properties.file=${?CONSUMER_PROPERTIES_FILE}
