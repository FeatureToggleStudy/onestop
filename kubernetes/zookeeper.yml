---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-headless
  labels:
    app: zookeeper
    tier: backend
    devmode: "true"
spec:
  selector:
    app: zookeeper
  clusterIP: None
  ports:
    - name: server
      port: 2888
      targetPort: server
    - name: leader-election
      port: 3888
      targetPort: leader-election
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    app: zookeeper
    tier: backend
    devmode: "true"
spec:
  selector:
    app: zookeeper
  ports:
    - name: client
      port: 2181
      targetPort: client
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper-sts
  labels:
    app: zookeeper
    tier: backend
    devmode: "true"
spec:
  selector:
    matchLabels:
      app: zookeeper
  serviceName: zookeeper-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                      - zookeeper
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:5.0.0
          imagePullPolicy: Always
          ports:
            - name: server
              containerPort: 2888
            - name: leader-election
              containerPort: 3888
            - name: client
              containerPort: 2181
          volumeMounts:
            - name: data
              mountPath: /var/lib/zookeeper/data
            - name: configmap
              mountPath: /etc/zookeeper-configmap
          resources:
            requests:
              cpu: 10m
              memory: 100Mi
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SERVICE_NAME
              value: "zookeeper-headless" # NOTE! THIS MUST MATCH SERVICE NAME FROM STATEFULSET SPEC!
            - name: REPLICAS
              value: "1" # NOTE! THIS MUST MATCH REPLICAS FROM STATEFULSET SPEC!
          command:
            - "/bin/bash"
            - "/etc/zookeeper-configmap/init.sh"
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - '[ "imok" = "$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)" ]'
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - '[ "imok" = "$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)" ]'
      volumes:
        - name: configmap
          configMap:
            name: zookeeper-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-config
  labels:
    app: zookeeper
    tier: backend
    devmode: "true"
data:
  init.sh: |-
    #!/bin/bash

    [ -z $REPLICAS ] && { echo REPLICAS is required; exit 1; }
    [ -z $POD_NAME ] && { echo POD_NAME is required; exit 1; }
    [ -z $SERVICE_NAME ] && { echo SERVICE_NAME is required; exit 1; }

    # Build the list of node addresses based on the number of replicas and the names of the pod and headless service
    NODE_BASE_NAME=${POD_NAME%-*}
    NODE_LIST=""
    for ((n=0; n < $REPLICAS; n++))
    do
      NODE_LIST="${NODE_LIST}${NODE_BASE_NAME}-$n.${SERVICE_NAME}:2888:3888;"
    done

    # Set up zookeeper variables
    export ZOOKEEPER_SERVER_ID=$(expr ${POD_NAME##*-} + 1)
    export ZOOKEEPER_SERVERS=${NODE_LIST%\;}
    export ZOOKEEPER_QUORUM_LISTEN_ON_ALL_IPS="true"
    export ZOOKEEPER_TICK_TIME="2000"
    export ZOOKEEPER_CLIENT_PORT="2181"

    /etc/confluent/docker/run
