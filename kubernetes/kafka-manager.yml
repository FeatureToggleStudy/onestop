---
apiVersion: v1
kind: Service
metadata:
  name: kafka-manager
  labels:
    app: kafka-manager
spec:
  selector:
    app: kafka-manager
  type: NodePort
  ports:
    - name: http
      port: 9000
      targetPort: http

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-manager
  labels:
    app: kafka-manager
spec:
  selector:
    matchLabels:
      app: kafka-manager
  template:
    metadata:
      labels:
        app: kafka-manager
    spec:
      containers:
        - name: kafka-manager
          image: hlebalbau/kafka-manager:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: ZK_HOSTS
              value: "zookeeper:2181"
#            - name: KM_CONTEXT_PATH
#              value: "kafka-manager"
#          volumeMounts:
#            - name: config
#              mountPath: /kafka-manager/conf
#      volumes:
#        - name: config
#          configMap:
#            name: km-config
#
#---
#
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: km-config
#  labels:
#    app: kafka-manager
#data:
#  application.conf: |-
#    # Copyright 2015 Yahoo Inc. Licensed under the Apache License, Version 2.0
#    # See accompanying LICENSE file.
#
#    # This is the main configuration file for the application.
#    # ~~~~~
#
#    # Secret key
#    # ~~~~~
#    # The secret key is used to secure cryptographics functions.
#    # If you deploy your application to several instances be sure to use the same key!
#    play.crypto.secret="^<csmm5Fx4d=r2HEX8pelM3iBkFVv?k[mc;IZE<_Qoq8EkX_/7@Zt6dP05Pzea3U"
#    play.crypto.secret=${?APPLICATION_SECRET}
#
#    # The application languages
#    # ~~~~~
#    play.i18n.langs=["en"]
#
#    play.http.requestHandler = "play.http.DefaultHttpRequestHandler"
#    play.http.context = "/kafka-manager" # <<----- CHANGED
#    play.application.loader=loader.KafkaManagerLoader
#
#    kafka-manager.zkhosts="kafka-manager-zookeeper:2181"
#    kafka-manager.zkhosts=${?ZK_HOSTS}
#    pinned-dispatcher.type="PinnedDispatcher"
#    pinned-dispatcher.executor="thread-pool-executor"
#    application.features=["KMClusterManagerFeature","KMTopicManagerFeature","KMPreferredReplicaElectionFeature","KMReassignPartitionsFeature"]
#
#    akka {
#      loggers = ["akka.event.slf4j.Slf4jLogger"]
#      loglevel = "INFO"
#    }
#
#    basicAuthentication.enabled=false
#    basicAuthentication.enabled=${?KAFKA_MANAGER_AUTH_ENABLED}
#    basicAuthentication.username="admin"
#    basicAuthentication.username=${?KAFKA_MANAGER_USERNAME}
#    basicAuthentication.password="password"
#    basicAuthentication.password=${?KAFKA_MANAGER_PASSWORD}
#    basicAuthentication.realm="Kafka-Manager"
#    basicAuthentication.excluded=["/api/health"] # ping the health of your instance without authentification
#
#    kafka-manager.consumer.properties.file=${?CONSUMER_PROPERTIES_FILE}
