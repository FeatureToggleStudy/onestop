import groovy.json.JsonSlurper
import com.wiredforcode.gradle.spawn.SpawnProcessTask
import com.wiredforcode.gradle.spawn.KillProcessTask

plugins {
  id "com.wiredforcode.spawn" version "0.6.0"
}

task downloadGHRSSTCollections << {
  def outputDir = file("${buildDir}/testMetadata/GHRSST/")
  outputDir.mkdirs()

  def apiUrl = new URL('http://data.nodc.noaa.gov/geoportal/rest/find/document' +
      '?searchText=title:GHRSST%20NOT%20title:Documentation&start=1&max=100&f=json')

  def json = new JsonSlurper().parse(apiUrl)
  json.records.each { record ->
    record.links.each { link ->
      if (link.type.contains("metadata")) {
        def linkString = link.href
        def name = linkString.substring(linkString.indexOf("=") + 1)
        name = name.replace('%7B', '')
        name = name.replace('%7D', '')
        println("name:${name}")
        file("${outputDir}/${name}.xml") << new URL(link.href).text
      }
    }
  }
}

task installJettyRunner(type: DownloadTask) {
  url = 'http://repo2.maven.org/maven2/org/mortbay/jetty/jetty-runner/8.1.10.v20130312/jetty-runner-8.1.10.v20130312.jar'
  targetDir = "${buildDir}/jetty"
}

task installGeoPortal(type: DownloadTask) {
  dependsOn 'installJettyRunner'
  finalizedBy 'extractGeoPortal'

  url = 'https://github.com/Esri/geoportal-server-catalog/releases/download/v2.0.0/geoportal-server-2.0.0.zip'
  targetDir = "${buildDir}/geoportal"
}

task extractGeoPortal(type: Copy) {
  from zipTree(installGeoPortal.targetFile)
  into installGeoPortal.targetFile.parentFile
}

task start(type: SpawnProcessTask) {
  dependsOn 'installGeoPortal', ':elasticsearch:start'
  onlyIf { !(new File(projectDir, '.pid.lock').exists()) }

  command "java -jar ${installJettyRunner.targetFile} ${installGeoPortal.targetDir}/geoportal.war"
  ready 'initialization completed'
  directory projectDir.absolutePath
}

task stop(type: KillProcessTask)
