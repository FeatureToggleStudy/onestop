buildscript {
  dependencies {
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7'
//      classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
  }
}

import groovy.json.JsonSlurper
import groovyx.net.http.HTTPBuilder
import com.wiredforcode.gradle.spawn.SpawnProcessTask
import com.wiredforcode.gradle.spawn.KillProcessTask
import groovyx.net.http.Method

plugins {
  id "com.wiredforcode.spawn" version "0.6.0"
}

task bootstrapGHRSST {
  dependsOn 'start'
  doLast {
    def srcUrl = new URL('http://data.nodc.noaa.gov/geoportal/rest/find/document' +
        '?searchText=title:GHRSST%20NOT%20title:Documentation&start=1&max=100&f=json')

    def geoportal = new HTTPBuilder('http://localhost:8888/rest/metadata/item')
    geoportal.auth.basic('gptadmin', 'gptadmin')

    def json = new JsonSlurper().parse(srcUrl)
    json.records.each { record ->
      record.links.each { link ->
        if (link.type.contains("metadata")) {
          geoportal.request(Method.PUT) {
            requestContentType = 'application/xml'
            body = new URL(link.href).text
            response.success = { resp, data ->
              println "${data.id}: ${data.status}"
            }
            response.failure = { resp, data ->
              println "Error uploading metadata from ${link.href}: ${data.error.message}"
            }
          }
        }
      }
    }
  }
}

// load DEM metadata
task bootstrapDEM {
  dependsOn 'start'
  doLast {
    def srcUrl = "https://www.ngdc.noaa.gov/metadata/published/NOAA/NESDIS/NGDC/MGG/DEM/iso/xml"
    def http = new HTTPBuilder(srcUrl)

    def geoportal = new HTTPBuilder('http://localhost:8888/rest/metadata/item')
    geoportal.auth.basic('gptadmin', 'gptadmin')

    def html = http.get([:])
    html."**".findAll { record ->
      def link = (srcUrl.toString() + '/' + record.toString())
      if (link.endsWith(".xml")) {
        geoportal.request(Method.PUT) {
          requestContentType = 'application/xml'
          def url = new URL(link)
          body = url.text
          response.success = { resp, data ->
            println "${data.id}: ${data.status}"
          }
          response.failure = { resp, data ->
            println "Error uploading metadata from ${url}: ${data.error.message}"
          }
        }
      }
    }
  }
}

task installJettyRunner(type: DownloadTask) {
  url = 'http://repo2.maven.org/maven2/org/mortbay/jetty/jetty-runner/8.1.10.v20130312/jetty-runner-8.1.10.v20130312.jar'
  targetDir = "${buildDir}/jetty"
}

task installGeoPortal(type: DownloadTask) {
  dependsOn 'installJettyRunner'
  finalizedBy 'extractGeoPortal'

  url = 'https://github.com/Esri/geoportal-server-catalog/releases/download/v2.0.0/geoportal-server-2.0.0.zip'
  targetDir = "${buildDir}/geoportal"
}

task extractGeoPortal(type: Copy) {
  from zipTree(installGeoPortal.targetFile)
  into installGeoPortal.targetFile.parentFile
}

task start(type: SpawnProcessTask) {
  dependsOn 'installGeoPortal', ':elasticsearch:start'
  onlyIf { !(new File(projectDir, '.pid.lock').exists()) }

  command "java -jar ${installJettyRunner.targetFile} --port 8888 ${installGeoPortal.targetDir}/geoportal.war"
  ready 'initialization completed'
  directory projectDir.absolutePath
}

task stop(type: KillProcessTask) {
  onlyIf { new File(projectDir, '.pid.lock').exists() }
  directory projectDir.absolutePath
}
