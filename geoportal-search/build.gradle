static def getDateTime() {
  return new Date().format("YYYY-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))
}

task dockerImage(type: Exec, description: 'Creates a docker image with the current build.', group: 'docker') {
  commandLine = "bash"
  args = ["-c", "docker build --no-cache " +
      "--build-arg VCS_REF=\$(git rev-parse --short HEAD) " +
      "--build-arg VERSION=${project.version} " +
      "--build-arg DATE=${getDateTime()} " +
      "-t cedardevs/${rootProject.name}-${project.name}:${project.version} " +
      "-t cedardevs/${rootProject.name}-${project.name}:latest " +
      "-t cedardevs/${rootProject.name}-${project.name}:latest-SNAPSHOT " +
      "."
  ]
}

task publishImage(type: Exec, description: 'Publishes the docker image', group: 'publish') {
  dependsOn dockerImage
  executable = "bash"
  args = ["-c", "docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD && " +
      "docker push cedardevs/${rootProject.name}-${project.name}:${project.version} && " +
      "docker push cedardevs/${rootProject.name}-${project.name}:latest-SNAPSHOT && " +
      "docker logout"]
}

task promote(type: Exec, description: 'Publishes the promoted docker image', group: 'publish') {
  dependsOn dockerImage
  executable = "bash"
  args = ["-c", "docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD && " +
      "docker tag cedardevs/${rootProject.name}-${project.name}:${project.version} cedardevs/${rootProject.name}-${project.name}:$version && " +
      "docker push cedardevs/${rootProject.name}-${project.name}:$version && " +
      "docker push cedardevs/${rootProject.name}-${project.name}:latest && " +
      "docker logout"]
}

task assemble { dependsOn dockerImage }
task build { dependsOn assemble }
task publish { dependsOn publishImage }
