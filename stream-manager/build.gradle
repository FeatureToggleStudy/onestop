plugins {
  id 'groovy'
  id 'application'
  id 'jacoco'
  id 'org.cedar.dockerplugin' version '1.0.3'
  id "com.github.johnrengelman.shadow" version "4.0.3"
}

mainClassName = 'org.cedar.psi.manager.StreamManagerMain'

repositories {
  mavenCentral()
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
  compile('org.codehaus.groovy:groovy:2.4.13')
  compile('org.codehaus.groovy:groovy-json:2.4.13')
  compile("org.codehaus.groovy:groovy-xml:2.4.13")
  compile('org.apache.kafka:kafka-streams:2.1.0')
  compile('org.apache.kafka:kafka-clients:2.1.0')
  compile('io.confluent:kafka-streams-avro-serde:5.1.0')
  compile('org.apache.commons:commons-text:1.2')
  compile('org.slf4j:slf4j-api:1.7.25')
  compile('ch.qos.logback:logback-classic:1.2.3')
  compile(project(':common'))

  testCompile("org.spockframework:spock-core:${project.spockVersion}")
  testCompile('org.apache.kafka:kafka-streams-test-utils:2.1.0')
  testCompile('org.apache.kafka:kafka-clients:2.1.0:test')
  testCompile('org.apache.kafka:kafka_2.12:2.1.0')
  testCompile('org.apache.kafka:kafka_2.12:2.1.0:test')
  testCompile('io.confluent:kafka-schema-registry:5.1.0')
  testCompile('io.confluent:kafka-schema-registry:5.1.0:tests')
  testCompile('com.github.java-json-tools:json-schema-validator:2.2.10')
  testCompile('com.github.cedardevs:schemas:0.1.1:test')
  testCompile('com.github.cedardevs:schemas:0.1.1:sources')
}

//sourceSets {
//  integrationTest {
//    groovy.srcDir file('src/integrationTest/groovy')
////    resources.srcDir file("src/main/resources")
//    compileClasspath += main.output + test.output + configurations.testRuntime
//    runtimeClasspath += output + compileClasspath
//  }
//}
//
//task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
//  mustRunAfter 'test'
//  testClassesDirs = sourceSets.integrationTest.output.classesDirs
//  classpath = sourceSets.integrationTest.runtimeClasspath
//  reports.junitXml.destination = file("${buildDir}/integration-test-results")
//  reports.html.destination = file("${buildDir}/reports/integrationTests")
//}
//
//check.dependsOn integrationTest

jar {
  baseName = "${rootProject.name}-${project.name}"
  manifest {
    attributes 'Main-Class': mainClassName
  }
}
// check http://imperceptiblethoughts.com/shadow/
shadowJar {
  baseName = "${rootProject.name}-${project.name}"
  classifier = 'all'
  version = version
  configurations = [project.configurations.compile]
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

docker {
  additionalBuildArgs = [JAR_NAME: shadowJar.outputs.files.singleFile.name]
}

BuildDockerImage.dependsOn(shadowJar)
assemble.dependsOn(BuildDockerImage)
assemble.dependsOn(sourceJar)
PublishDockerImage.dependsOn(BuildDockerImage)
task publish { dependsOn PublishDockerImage }
